// File: fluent_grammar.lark
// Grammar definition for the Fluent language (Simplified for bubble sort example)

?start: statement*

// Statements
?statement: variable_declaration
          | assignment
          | if_statement
          | while_statement
          | function_call_statement
          | print_statement
          | return_statement
          | function_definition
          | COMMENT -> ignored_statement

// Variable declaration with optional initializer
variable_declaration: IDENTIFIER ":" type ["=" expression] ";"?
                   | "VAR" IDENTIFIER "AS" type ["=" expression] ";"?

// Assignment statement
assignment: IDENTIFIER "=" expression ";"?

// Function call as statement
function_call_statement: function_call ";"?

// Print statement
print_statement: "PRINT" "(" expression ")" ";"?

// Return statement
return_statement: "RETURN" [expression] ";"?

// If statement
if_statement: "IF" expression "THEN" statement* "END" ";"?

// While statement
while_statement: "WHILE" expression "DO" statement* "END" ";"?

// Function definition
function_definition: "FUNCTION" IDENTIFIER parameters [":" type] statement* "END" ";"?

// Parameters
parameters: "(" [parameter_list] ")"
parameter_list: parameter ("," parameter)*
parameter: IDENTIFIER ":" type

// Types
?type: basetype | list_type

basetype: "INTEGER" | "FLOAT" | "STRING" | "BOOLEAN" | "NOTHING"
list_type: "LIST" "<" basetype ">"

// Expressions
?expression: comparison
          | arith_expr
          | function_call
          | list_literal
          | IDENTIFIER
          | literal

// Comparison expressions
comparison: expression comp_op expression
comp_op: "==" -> eq
       | "!=" -> neq
       | "<" -> lt
       | ">" -> gt
       | "<=" -> lte
       | ">=" -> gte

// Arithmetic expressions
?arith_expr: term
          | arith_expr "+" term -> add
          | arith_expr "-" term -> sub

?term: factor
     | term "*" factor -> mul
     | term "/" factor -> div

?factor: atom
       | "+" factor -> pos
       | "-" factor -> neg

?atom: "(" expression ")"
     | IDENTIFIER
     | literal
     | function_call
     | list_literal

// Function call
function_call: NAME "(" [arguments] ")"
arguments: expression ("," expression)*

// Literals
?literal: INTEGER
        | STRING
        | BOOLEAN

list_literal: "[" [expression ("," expression)*] "]"

// Terminals
NAME: /[a-zA-Z_][a-zA-Z0-9_]*/
IDENTIFIER: /[a-zA-Z_][a-zA-Z0-9_]*/
INTEGER: /-?\d+/
STRING: /"[^"]*"/
BOOLEAN: "TRUE" | "FALSE"
COMMENT: "//" /[^\n]*/

// Ignore whitespace and comments
%import common.WS
%ignore WS
%ignore COMMENT
